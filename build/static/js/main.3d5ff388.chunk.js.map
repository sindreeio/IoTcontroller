{"version":3,"sources":["Pages/Home.js","password.js","Database/Firebase.js","Pages/Products.js","Header.js","Pages/Product.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","useState","userpassword","setUserpassword","correct","setCorrect","className","to","onChange","e","target","value","onClick","userinput","console","log","Password","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","databaseRef","ref","Product","name","Products","products","setProducts","useEffect","child","once","then","snapshot","data","val","items","Object","values","key","keys","array","map","i","id","push","Header","useParams","hour","setHour","min","setMin","class","type","max","hours","minutte","now","Date","secondsSinceEpoch","Math","round","getTime","hou","getHours","mi","getMinutes","totaltime","update","number","sendTime","App","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ServiceWorker"],"mappings":"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","file":"static/js/main.3d5ff388.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport '../index.css';\r\nimport password from '../password';\r\n\r\n\r\nfunction Password(userinput){\r\n    if(userinput=== password){\r\n        console.log(\"dadsssf\")\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction Home(props){\r\n\r\n   const [userpassword, setUserpassword] = useState(password);\r\n   const [correct, setCorrect] = useState(false);\r\n\r\n    return(\r\n        \r\n        <div className=\"container\">\r\n            {correct ? <Redirect to=\"/stuff\"/> : null}\r\n            <div className=\"flex-container\">\r\n                <div className=\"row\">\r\n                    <div className=\"\">\r\n                        <input onChange={(e) => setUserpassword(e.target.value)}></input>\r\n                    </div>\r\n                    <div className=\"flex-row-item\">\r\n                        <button onClick={() => setCorrect(Password(userpassword))} className=\"submitButton\">Log in</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )   \r\n}\r\n\r\nexport default Home;","export default \"Buzzword\"","import * as firebase from \"firebase/app\";\r\nimport 'firebase/database';\r\n\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCJbR1gM4tyvfS6V9LRyzp6Zk4zKjhHz54\",\r\n    authDomain: \"iot-stuff-8c853.firebaseapp.com\",\r\n    databaseURL: \"https://iot-stuff-8c853.firebaseio.com\",\r\n    projectId: \"iot-stuff-8c853\",\r\n    storageBucket: \"iot-stuff-8c853.appspot.com\",\r\n    messagingSenderId: \"87270960150\",\r\n    appId: \"1:87270960150:web:60fb7e8fe50716a62d5937\",\r\n    measurementId: \"G-KMTN6E7GPN\"\r\n  };\r\n\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n  let databaseRef = firebase.database().ref();\r\n  export default databaseRef;","import React, { useEffect, useState } from 'react';\r\nimport '../index.css';\r\nimport databaseRef from '../Database/Firebase';\r\nimport { Link }from \"react-router-dom\";\r\n\r\n\r\n\r\nfunction Products(props){\r\n\r\n    const [products, setProducts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const prod = databaseRef.child(\"Products\").once('value').then(snapshot => {\r\n            let data = snapshot.val();\r\n            let items = Object.values(data);\r\n            let key = Object.keys(snapshot.val());        \r\n            let array = [];\r\n             const j = items.map((i, id) => {\r\n             array.push( <div><Product name={key[id]} items={i}/></div>);\r\n            });\r\n            setProducts(array);\r\n        });\r\n        }\r\n    )\r\n\r\n    return(\r\n        <div className=\"grid\">\r\n            {products}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction Product(props){\r\n    return(\r\n        <Link to={`/product/${props.name}`}>\r\n        <div className=\"grid-item flex-centre\"><div className=\"product-header\">{props.name}</div></div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Products;","import React from 'react';\r\nimport './index.css'\r\n\r\n\r\nfunction Header(){\r\n    return(\r\n        <div className=\"header\">\r\n        <h1>IOT-stuff</h1></div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useEffect, useState } from 'react';\r\nimport '../index.css';\r\nimport databaseRef from '../Database/Firebase';\r\nimport { useParams } from \"react-router-dom\";\r\n\r\n\r\nfunction sendTime(hours, minutte, id){\r\n    if(hours<24 && minutte < 59){\r\n        const now = new Date()  \r\n        const secondsSinceEpoch = Math.round(now.getTime() / 1000);\r\n        const hou = hours - now.getHours();\r\n        if (hou < 0){\r\n            hou += 24;\r\n        };\r\n        const mi = minutte - now.getMinutes();\r\n        if (mi < 0){\r\n            mi += 24;\r\n        };\r\n        const plusstime = (mi * 60) + (hou*3600);\r\n        const totaltime = secondsSinceEpoch + plusstime;\r\n        console.log(hours);\r\n        databaseRef.child(\"Products\").child(\"wakeup\").update({number: totaltime});  \r\n    }\r\n\r\n}\r\n\r\nfunction Product(props){\r\n    const { name } = useParams();\r\n    const [hour, setHour] = useState();\r\n    const [min, setMin] = useState();\r\n\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"flex-container\">\r\n                <input onChange={(e) => setHour(e.target.value)} class=\"small-input\" type=\"number\" min=\"0\" max=\"23\"></input> <div> : </div>\r\n                <input onChange={(e) => setMin(e.target.value)} class=\"small-input\" type=\"number\" min=\"0\" max=\"59\"></input>\r\n                <div className=\"flex-row-item\">\r\n                        <button onClick={() => sendTime(hour, min, name)} className=\"submitButton\">Submit</button>\r\n                </div>\r\n            </div>\r\n            <div>hei</div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Product;","import React from 'react';\r\nimport { BrowserRouter, Route} from \"react-router-dom\";\r\nimport Home from './Pages/Home';\r\nimport Products from './Pages/Products'\r\nimport Header from './Header';\r\nimport './index.css';\r\nimport Product from './Pages/Product'\r\n\r\n\r\n\r\nfunction App() {\r\n    return(\r\n      <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Header/>\r\n          <Route exact path=\"/\">\r\n            <Home/>\r\n          </Route>\r\n          <Route exact path=\"/stuff\">\r\n            <Products/>\r\n          </Route>\r\n          <Route exact path=\"/product/:name\">\r\n            <Product/>\r\n          </Route>\r\n      </div>\r\n      </BrowserRouter>\r\n    )\r\n    \r\n  }\r\n  \r\n  export default App;\r\n  ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as ServiceWorker from './serviceWorker';\r\n\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nServiceWorker.register();"],"sourceRoot":""}